{
	"title": "Real Time Multiplayer in HTML5",
    "alias": "real-time-multiplayer-in-HTML5",
    "summary": "Real Time Multiplayer in Node.js、Socket.io、Canvas/HTML5",
    "content": "### 基于浏览器的多人游戏\n当你考虑要做多人游戏，有很多方法，创造一个游戏玩家都可以在线玩。 例如，一个纸牌游戏，你玩的朋友同步。匝数，（半）实时和游戏离散的步骤进行信息交换。另一个例子是，国际象棋，可以是异步的。\n纸牌游戏和国际象棋两种，通常需要与服务器的通信和与其他玩家沟通，以联机工作。这可能是多人经验的基础 - 很长一段时间，这已经通过HTTP POST和GET一直用于管理​​游戏存在。\n这些方法的问题是延迟，发布一条消息，并等待每一个响应时间太慢。它的工作原理的半实时和异步游戏，但需要消息发送和接收的地区在33〜66倍，每秒的东西不是很可能单独与HTTP有时实时游戏。\n幸运的是，在现代浏览器中，我们可以采取一个步骤更高，有服务器和客户之间的实时连接。本次讨论的目的是提出一个如何多人游戏概述。我们将着眼于输入预测，滞后补偿，客户插值，更重要的是 - 如何在您的正常浏览器使用的WebSockets。本文将提出一起玩的参数可播放的演示，展示讨论​​的概念。\n### 我们选择的技术和为什么\n#### Socket.io\nsocket.io是一个强大而灵活的服务器端和客户端组件，使您的浏览器实时联网。它不仅支持网络插座等新技术，但也回落到一个Flash网络层的安全，长轮询的XHR或JSON，甚至一个HTML文件的传输层。关于它最吸引人的也许是它带来了，这是非常有用的服务器和客户端代码写入时的简单性和固有的异步性。\n另一种使用socket.io的好处是它无缝Node.js的关系的事实。加上快递时，连接上，它可以为客户端包括游戏文件和数据，整洁，易于集成。一旦你设置它，与客户的第一个连接和通信量之间的代码是令人惊叹。和它的工作在所有浏览器，移动包括在内。\n#### Node.js\nNode.js的是一个易于使用，灵活，跨平台的工具。它更像是一个事件触发的IO。它有一个专用的用户，开发的模块有很多。它支持良好的服务器托管Web应用程序平台的数量，并且很容易安装一个属于自己的专用服务器上，所以寻找一个主机不应该是一个问题。其中许多为Node.js的这些伟大的模块，是一个web框架，称为快。它涵盖了服务档案，复杂的路由，客户端身份验证和会话，更。它完美地融入栈之间socket.io和我们的客户，其中socket.io通过Express和Express可以为它的文件到客户端可以处理我们的游戏内容。\n#### Canvas/HTML5\n本文使用二维的画布上，以证明我们的方法去覆盖，这使得我们可以很容易得出一些文本和框。\n### 在您的浏览器实时多人连接入门\n涵盖了所有可能的选择，并为上述技术安装和配置，是小了本文的范围，但上述工具的每个人都有自己的文档，应该用不了多长时间，已成立和工作在一起。为简洁起见，我们将深入到，而不是一个简单的游戏范例。下面的信息是建立一个空的画布，连接的socket.io服务器和接收邮件所需的最低。\n#### 开始用一个简单的Web服务器，进入快速\n一个简单的Express服务器的代码是真正的短期和简单。它为指定的端口上的文件（在这种情况下，4004），它只会从根文件夹（如文件的index.html），我们从一个特定的’游戏’路径指定（如游戏/）。\n    var gameport        = process.env.PORT || 4004,\n        io              = require('socket.io'),\n        express         = require('express'),\n        UUID            = require('node-uuid'),\n        verbose         = false,\n        app             = express.createServer();\n\n        //Tell the server to listen for incoming connections\n    app.listen( gameport );\n    console.log('\t :: Express :: Listening on port ' + gameport );\n    app.get( '/', function( req, res ){ \n        res.sendfile( __dirname + '/simplest.html' );\n    });\n        //This handler will listen for requests on /*, any file from the root of our server.\n\n    app.get( '/*' , function( req, res, next ) {\n        var file = req.params[0]; \n        if(verbose) console.log('\t :: Express :: file requested : ' + file);\n        res.sendfile( __dirname + '/' + file );\n    }); \n#### Socket.io，加入实时组件\n\n现在我们添加socket.io Node.js的服务器部分的代码。当然，在快速代码相同的文件，只是它下面的要点所示。服务器将其自身附加表示请求时，它可能为客户端文件。\n\n    //Express and socket.io can work together to serve the socket.io client files for you.\n    //This way, when the client requests '/socket.io/' files, socket.io determines what the client needs.\n        \n    //Create a socket.io instance using our express server\n    var sio = io.listen(app);\n\n        //Configure the socket.io connection settings. \n        //See http://socket.io/\n    sio.configure(function (){\n        sio.set('log level', 0);\n        sio.set('authorization', function (handshakeData, callback) {\n          callback(null, true); // error first callback style \n        });\n\n    });\n\n        //Socket.io will call this function when a client connects, \n        //So we can send that client a unique ID we use so we can \n        //maintain the list of players.\n    sio.sockets.on('connection', function (client) {\n        \n            //Generate a new UUID, looks something like \n            //5b2ca132-64bd-4513-99da-90e838ca47d1\n            //and store this on their socket/connection\n        client.userid = UUID();\n\n            //tell the player they connected, giving them their id\n        client.emit('onconnected', { id: client.userid } );\n\n            //Useful to know when someone connects\n        console.log('\t socket.io:: player ' + client.userid + ' connected');\n        \n            //When this client disconnects\n        client.on('disconnect', function () {\n\n                //Useful to know when someone disconnects\n            console.log('\t socket.io:: client disconnected ' + client.userid );\n\n        }); //client.on disconnect\n     \n    }); //sio.sockets.on connection\n#### index.htm，客户端连接到服务器\n\n客户端需要很少的代码，能够连接到服务器。\n\n### 获取代码\n [项目地址](https://github.com/FuzzYspo0N/realtime-multiplayer-in-html5)",
    "source": "Sven Bergström",
    "url": "http://buildnewgames.com/real-time-multiplayer/",
    "user": {
            "username": "Icyse"
        },
    "imgList": [],
    "categoryList": ["GameJs"],
    "commentList": [],
    "viewCount": 0,
    "commentCount": 0,
    "voteCount": 0,
    "createdTime": "2016-01-01 10:00",
    "updatedTime": "2016-01-01 10:00"
}
{
    "title": "How does Promise work",
    "alias": "promise",
    "summary": "Javascript 采用回调函数(callback)来处理异步编程。从同步编程到异步回调编程有一个适应的过程，但是如果出现多层回调嵌套，也就是我们常说的厄运的回调金字塔(Pyramid of Doom)，绝对是一种糟糕的编程体验。于是便有了 CommonJS 的 Promises/A 规范，用于解决回调金字塔问题。本文先介绍 Promises 相关规范，然后再通过解读一个迷你的 Promises 以加深理解。",
    "content": "### 什么是 Promise\n一个 Promise 对象代表一个目前还不可用，但是在未来的某个时间点可以被解析的值。它允许你以一种同步的方式编写异步代码。例如，如果你想要使用 Promise API 异步调用一个远程的服务器，你需要创建一个代表数据将会在未来由 Web 服务返回的 Promise 对象。唯一的问题是目前数据还不可用。当请求完成并从服务器返回时数据将变为可用数据。在此期间，Promise 对象将扮演一个真实数据的代理角色。接下来，你可以在 Promise 对象上绑定一个回调函数，一旦真实数据变得可用这个回调函数将会被调用。\n\nPromise 对象曾经以多种形式存在于许多语言中。\n\n### 去除厄运的回调金字塔(Pyramid of Doom)\nJavascript 中最常见的反模式做法是回调内部再嵌套回调。\n\n\t// 回调金字塔\n\tasyncOperation(function(data){\n\t  // 处理 `data`\n\t  anotherAsync(function(data2){\n\t      // 处理 `data2`\n\t      yetAnotherAsync(function(){\n\t          // 完成\n\t      });\n\t  });\n\t});\n引入 Promises 之后的代码\n\n\tpromiseSomething()\n\t.then(function(data){\n\t    // 处理 `data`\n\t    return anotherAsync();\n\t})\n\t.then(function(data2){\n\t    // 处理 `data2`\n\t    return yetAnotherAsync();\n\t})\n\t.then(function(){\n\t    // 完成\n\t});\nPromises 将嵌套的 callback，改造成一系列的.then的连缀调用，去除了层层缩进的糟糕代码风格。Promises 不是一种解决具体问题的算法，而已一种更好的代码组织模式。接受新的组织模式同时，也逐渐以全新的视角来理解异步调用。\n\n各个语言平台都有相应的 Promise 实现\n\n+ Java's java.util.concurrent.Future\n+ Python's Twisted deferreds and PEP-3148 futures\n+ F#'s Async\n+ .Net's Task\n+ C++ 11's std::future\n+ Dart's Future\n+ Javascript's Promises/A/B/D/A+\n下面我来相信了解一下 javascript 语言环境下各个规范的一些细节。\n### Promises/A 规范\npromise 表示一个最终值，该值由一个操作完成时返回。\n\n+ promise 有三种状态：**未完成** (unfulfilled)，**完成** (fulfilled) 和**失败** (failed)。\n+ promise 的状态只能由**未完成**转换成完成，或者**未完成**转换成**失败** 。\n+ promise 的状态转换只发生一次。\n+ promise 有一个 then 方法，then 方法可以接受 3 个函数作为参数。前两个函数对应 promise 的两种状态\n+ fulfilled 和 rejected 的回调函数。第三个函数用于处理进度信息（对进度回调的支持是可选的）。\n\n    promiseSomething().then(function(fulfilled){\n        //当promise状态变成fulfilled时，调用此函数\n    },function(rejected){\n        //当promise状态变成rejected时，调用此函数\n    },function(progress){\n        //当返回进度信息时，调用此函数\n    });\n如果 promise 支持如下连个附加方法，称之为可交互的 promise\n\n    get(propertyName)\n获得当前 promise 最终值上的一个属性，返回值是一个新的 promise。\n\n    call(functionName, arg1, arg2, ...)\n调用当然 promise 最终值上的一个方法，返回值也是一个新的promise。\n\n### Promises/B 规范\n在 Promises/A 的基础上，Promises/B 定义了一组 promise 模块需要实现的 API\n\n    when(value, callback, errback_opt)\n如果 value 不是一个 promise ，那么下一事件循环callback会被调用，value 作为 callback 的传入值。如果 value 是一个 promise，promise 的状态已经完成或者变成完成时，那么下一事件循环 callback 会被调用，resolve 的值会被传入 callback；promise 的状态已经失败或者变成失败时，那么下一事件循环 errback 会被调用，reason 会作为失败的理由传入 errback。\n\n    asap(value, callback, errback_opt)\n与 when 最大的区别，如果 value 不是一个 promise，会被立即执行，不会等到下一事件循环。\n\n    enqueue(task Function)\n尽可能快地在接下来的事件循环调用 task 方法。\n\n    get(object, name)\n返回一个获得对象属性的 promise。\n\n    post(object, name, args)\n返回一个调用对象方法的 promise。\n\n    put(object, name, value)\n返回一个修改对象属性的 promise。\n\n    del(object, name)\n返回一个删除对象属性的 promise。\n\n    makePromise(descriptor Object, fallback Function)\n返回一个 promise 对象，该对象必须是一个可调用的函数，也可能是可被实例化的构造函数。\n+ 第一个参数接受一个描述对象，该对象结构如下，\n\n    { \n    \t\"when\": function(errback){...}, \n    \t\"get\": function(name){...}, \n    \t\"put\": function(name, value){...}, \n    \t\"post\": function(name, args){...}, \n    \t\"del\": function(name){...}, \n    } \n上面每一个注册的 handle 都返回一个 resolved value或者 promise。\n\n+ 第二个参数接受一个 fallback(message,...args) 函数，当没有 promise 对象没有找到对应的 handle 时该函数会被触发，返回一个 resolved value 或者 promise。\n\n    defer()\n返回一个对象，该对象包含一个 resolve(value) 方法和一个 promise 属性。\n当 resolve(value) 方法被第一次调用时，promise 属性的状态变成 完成，所有之前或之后观察该 promise 的 promise 的状态都被转变成 完成。value 参数如果不是一个 promise ，会被包装成一个 promise 的 ref。resolve 方法会忽略之后的所有调用。\n\n    reject(reason String)\n返回一个被标记为 失败 的 promise。\n一个失败的 promise 上被调用 when(message) 方法时，会采用如下两种方法之一\n1. 如果存在 errback，errback 会以 reason 作为参数被调用。when方法会将 errback 的返回值返回。\n2. 如果不存在 errback，when 方法返回一个新的 reject 状态的promise 对象，以同一 reason 作为参数。\n\n    ref(value)\n如果 value 是 promise 对象，返回 value 本身。否则，返回一个resolved 的 promise，携带如下 handle。\n1. when(errback),忽略 errback，返回 resolved 值\n2. get(name)，返回 resolved 值的对应属性。\n3. put(name, value) ，设置 resolved 值的对应属性。\n4. del(name)，删除 resolved 值的对应属性。\n5. post(name, args), 调用 resolved 值的对应方法。\n6. 其他所有的调用都返回一个 reject，并携带 \"Promise does not handle NAME\" 的理由。\n\n    isPromise(value) Boolean\n判断一个对象是否是 promise\n\n    method(name String)\n获得一个返回 name 对应方法的 promise。返回值是 \"get\", \"put\", \"del\" 和 \"post\" 对应的方法，但是会在下一事件循环返回。\n### Promises/D 规范\n为了增加不同 promise 实现之间的可互操作性，Promises/D 规范对promise 对象和 Promises/B 规范做了进一步的约定。以达到鸭子类型的效果（Duck-type Promise）。\n\n简单来说Promises/D 规范，做了两件事情，\n\n1. 如何判断一个对象是 Promise 类型。\n2. 对 Promises/B 规范进行细节补充。\n### 甄别一个 Promise 对象\nPromise 对象必须是实现 promiseSend 方法。\n1. 在 promise 库上下文中，如果对象包含 promiseSend 方法就可以甄别为promise 对象\n2. promiseSend 方法必须接受一个操作名称，作为第一个参数\n3. 操作名称是一个可扩展的集合，下面是一些保留名称\n1. when，此时第三个参数必须是 rejection 回调。\n1. rejection回调必须接受一个 rejection 原因(可以是任何值)作为第一个参数\n2. get，此时第三个参数为属性名（字符串类型）\n3. put，此时第三个参数为属性名（字符串类型）,第四个参数为新属性值。\n4. del，此时第三个参数为属性名\n5. post，此时第三个参数为方法的属性名，接下来的变参为方法的调用参数\n6. isDef\n4. promiseSend方法的第二个参数为 resolver 方法\n5. promiseSend方法可能接受变参\n6. promiseSend方法必须返回undefined\n\n### 对 Promises/B 规范的补充\nPromises/D 规范中对 Promises/B 规范中定义的ref、reject、def、defer方法做了进一步细致的约束，此处略去这些细节。\n\n### Promises/A+ 规范\n前面提到的 Promises/A/B/D 规范都是有CommonJS组织提出的，Promises/A+是有一个自称为Promises/A+ 组织发布的，该规范是以Promises/A作为基础进行补充和修订，旨在提高promise实现之间的可互操作性。\n\nPromises/A+ 对.then方法进行细致的补充，定义了细致的Promise Resolution Procedure流程，并且将.then方法作为promise的对象甄别方法。\n\n此外，Promises/A+ 还提供了兼容性测试工具，以确定各个实现的兼容性。\n\n### 实现一个迷你版本的Promise\n上面扯了这么多规范，现在我们看看如何实现一个简单而短小的Promise。\n\n#### 状态机\n\n\tvar PENDING = 0;\n\tvar FULFILLED = 1;\n\tvar REJECTED = 2;\n\n\tfunction Promise() {\n\t  // store state which can be PENDING, FULFILLED or REJECTED\n\t  var state = PENDING;\n\n\t  // store value or error once FULFILLED or REJECTED\n\t  var value = null;\n\n\t  // store sucess & failure handlers attached by calling .then or .done\n\t  var handlers = [];\n\t}\n#### 状态变迁\n仅支持两种状态变迁，fulfill和reject\n\n\t// ...\n\n\tfunction Promise() {\n\t    // ...\n\n\t  function fulfill(result) {\n\t    state = FULFILLED;\n\t    value = result;\n\t  }\n\n\t  function reject(error) {\n\t    state = REJECTED;\n\t    value = error;\n\t  }\n\n\t}\nfulfill和reject方法较为底层，通常更高级的resolve方法开放给外部。\n\n    // ...\n\n    function Promise() {\n\n      // ...\n\n      function resolve(result) {\n        try {\n          var then = getThen(result);\n          if (then) {\n            doResolve(then.bind(result), resolve, reject)\n            return\n          }\n          fulfill(result);\n        } catch (e) {\n          reject(e);\n        }\n      }\n    }\nresolve方法可以接受一个普通值或者另一个promise作为参数，如果接受一个promise作为参数，等待其完成。promise不允许被另一个promise fulfill，所以需要开放resolve方法。resolve方法依赖一些帮助方法定义如下:\n\n    /**\n     * Check if a value is a Promise and, if it is,\n     * return the `then` method of that promise.\n     *\n     * @param {Promise|Any} value\n     * @return {Function|Null}\n     */\n    function getThen(value) {\n      var t = typeof value;\n      if (value && (t === 'object' || t === 'function')) {\n        var then = value.then;\n        if (typeof then === 'function') {\n          return then;\n        }\n      }\n      return null;\n    }\n\n    /**\n     * Take a potentially misbehaving resolver function and make sure\n     * onFulfilled and onRejected are only called once.\n     *\n     * Makes no guarantees about asynchrony.\n     *\n     * @param {Function} fn A resolver function that may not be trusted\n     * @param {Function} onFulfilled\n     * @param {Function} onRejected\n     */\n    function doResolve(fn, onFulfilled, onRejected) {\n      var done = false;\n      try {\n        fn(function (value) {\n          if (done) return\n          done = true\n          onFulfilled(value)\n        }, function (reason) {\n          if (done) return\n          done = true\n          onRejected(reason)\n        })\n      } catch (ex) {\n        if (done) return\n        done = true\n        onRejected(ex)\n      }\n    }\n这里resolve和doResolve之间的递归很巧妙，用来处理promise的层层嵌套（promise的value是一个promise）。\n\n#### 构造器\n\n    // ...\n    function Promise(fn) {\n        // ...\n        doResolve(fn, resolve, reject);\n    }\n#### .done方法\n\n    // ...\n    function Promise(fn) {\n      // ...\n\n      function handle(handler) {\n        if (state === PENDING) {\n          handlers.push(handler);\n        } else {\n          if (state === FULFILLED &&\n            typeof handler.onFulfilled === 'function') {\n            handler.onFulfilled(value);\n          }\n          if (state === REJECTED &&\n            typeof handler.onRejected === 'function') {\n            handler.onRejected(value);\n          }\n        }\n      }\n\n      this.done = function (onFulfilled, onRejected) {\n        // ensure we are always asynchronous\n        setTimeout(function () {\n          handle({\n            onFulfilled: onFulfilled,\n            onRejected: onRejected\n          });\n        }, 0);\n      }\n      // ...\n    }\n#### .then方法\n\n    // ...\n    function Promise(fn) {\n        // ...\n        this.then = function (onFulfilled, onRejected) {\n          var self = this;\n          return new Promise(function (resolve, reject) {\n            return self.done(function (result) {\n              if (typeof onFulfilled === 'function') {\n                try {\n                  return resolve(onFulfilled(result));\n                } catch (ex) {\n                  return reject(ex);\n                }\n              } else {\n                return resolve(result);\n              }\n            }, function (error) {\n              if (typeof onRejected === 'function') {\n                try {\n                  return resolve(onRejected(error));\n                } catch (ex) {\n                  return reject(ex);\n                }\n              } else {\n                return reject(error);\n              }\n            });\n          });\n        }\n        // ...\n    }\n#### $.promise\njQuery 1.8 之前的版本，jQuery的 then 方法只是一种可以同时调用 done 、fail 和 progress 这三种回调的速写方法，而 Promises/A 规范的 then 在行为上更像是 jQuery 的 pipe。 jQuery 1.8 修正了这个问题，使 then 成为 pipe 的同义词。不过，由于向后兼容的问题，jQuery 的 Promise 再如何对 Promises/A 示好也不太会招人待见。\n\n此外，在 Promises/A 规范中，由 then 方法生成的 Promise 对象是已执行还是已拒绝，取决于由 then 方法调用的那个回调是返回值还是抛出错误。在 JQuery 的 Promise 对象的回调中抛出错误是个糟糕的主意，因为错误不会被捕获。\n\n### 小结\n最后一个例子揭示了，实现 Promise 的关键是实现好 doResolve 方法，在完事以后触发回调。而为了保证异步 setTimeout(fun, 0); 是关键一步。\n\nPromise 一直用得蛮顺手的，其很好的优化了 NodeJS 异步处理时的代码结构。但是对于其工作原理却有些懵懂和好奇。于是花了些经理查阅并翻译了Promise 的规范，以充分的理解 Promise 的细节。",
    "source": "Coding 博客",
    "url": "https://blog.coding.net/blog/how-do-promises-work",
    "user": {
        "username": "Icyse"
    },
    "imgList": [],
    "categoryList": ["JavaScript"],
    "commentList": [],
    "viewCount": 0,
    "commentCount": 0,
    "voteCount": 0,
    "createdTime": "2015-08-01 10:00",
    "updatedTime": "2015-08-01 10:00"
}
